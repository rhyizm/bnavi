import { PrismaClient } from "@prisma/client";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import csvParser from "csv-parser";

// ESM ÂΩ¢Âºè„Åß __dirname „ÇíÂèñÂæó
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const prisma = new PrismaClient();

// **„Éò„ÉÉ„ÉÄ„Éº„Éû„ÉÉ„Éî„É≥„Ç∞Ë®≠ÂÆö**
const headerMappings: Record<string, string> = {
    "ÂìÅÁï™„Ç≥„Éº„Éâ": "code",
    "Ë£ΩÂìÅÂêç": "name",
    "Ê©üÂô®Âçò‰æ°": "price",
    // Â∞ÜÊù•ÁöÑ„Å´ËøΩÂä†„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞„Çí„Åì„Åì„Å´ÂÆöÁæ©
};

// **„Éò„ÉÉ„ÉÄ„ÉºÂêç„ÇíÂ§âÊèõ„Åô„ÇãÈñ¢Êï∞**
const mapHeader = (header: string): string => {
    const trimmedHeader = header.trim();
    return headerMappings[trimmedHeader] || trimmedHeader;
};

// **„ÉÜ„Ç≠„Çπ„ÉàÊ®ôÊ∫ñÂåñÈñ¢Êï∞**
const normalizeText = (str: string): string => {
    return str
        .normalize("NFKC")  // **ÂÖ®Ëßí ‚Üí ÂçäËßíÂ§âÊèõ & Ê≠£Ë¶èÂåñ**
        .replace(/[ÔºÅ-ÔΩû]/g, (ch) => String.fromCharCode(ch.charCodeAt(0) - 0xFEE0))  // Ë®òÂè∑ & Ëã±Êï∞Â≠ó„ÇíÂçäËßíÂåñ
        .replace(/„ÄÄ/g, " ")  // **ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ ‚Üí ÂçäËßí„Çπ„Éö„Éº„Çπ**
        .replace(/[‚Äê‚àí‚Äí‚Äì‚Äî‚Äï]/g, "-")  // **„Éè„Ç§„Éï„É≥„ÅÆÁµ±‰∏Ä**
        .replace(/\s+/g, " ")  // **ÈÄ£Á∂ö„Çπ„Éö„Éº„Çπ„Çí1„Å§„Å´Áµ±‰∏Ä**
        .trim();  // **ÂâçÂæå„ÅÆ„Çπ„Éö„Éº„Çπ„ÇíÂâäÈô§**
};

// **Êó•‰ªò„ÇíÂ§âÊèõ„Åô„ÇãÈñ¢Êï∞Ôºàundefined „ÇíËÄÉÊÖÆÔºâ**
const parseDate = (dateString: string | undefined): Date | null => {
    if (!dateString) {
        console.error("‚ùå Warning: Missing date field");
        return null;
    }

    const raw = dateString.trim();
    let normalized = raw;

    // Support YYYYMMDD (e.g., 20250901) by converting to YYYY-MM-DD
    const yyyymmdd = raw.match(/^(\d{4})(\d{2})(\d{2})$/);
    if (yyyymmdd) {
        const [, y, m, d] = yyyymmdd;
        normalized = `${y}-${m}-${d}`;
    } else {
        // Normalize slashes to dashes for YYYY/MM/DD
        normalized = raw.replace(/\//g, "-");
    }

    const date = new Date(normalized);

    if (isNaN(date.getTime())) {
        console.error(`‚ùå Invalid date format: ${dateString}`);
        return null;
    }

    return date;
};

const processCSVFile = async (filePath: string, category: string): Promise<any[]> => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const components: any[] = [];

    return new Promise((resolve, reject) => {
        fs.createReadStream(filePath)
            .pipe(csvParser({ mapHeaders: ({ header }) => mapHeader(header) })) // „Éò„ÉÉ„ÉÄ„Éº„Éû„ÉÉ„Éî„É≥„Ç∞„ÇíÈÅ©Áî®
            .on("data", (row) => {
                console.log("üîç Debug Row:", row);

                const updatedDate = row.updated ? parseDate(row.updated) : new Date();
                if (row.updated && !updatedDate) {
                    console.warn(`‚ö†Ô∏è Skipping row due to invalid date: ${JSON.stringify(row)}`);
                    return;
                }

                // Prefer original_name as the source of truth; fall back to name if present
                const original = (row.original_name ?? row.name) as string | undefined;
                if (!original) {
                    console.warn(`‚ö†Ô∏è Skipping row due to missing original_name/name: ${JSON.stringify(row)}`);
                    return;
                }

                const normalizedName = normalizeText(original);
                if (!normalizedName) {
                    console.warn(`‚ö†Ô∏è Skipping row due to blank name: ${JSON.stringify(row)}`);
                    return;
                }

                components.push({
                    updated: updatedDate,
                    name: normalizedName, // **original_name „ÇíÊ≠£Ë¶èÂåñ**
                    originalName: original, // **ÂÖÉ„ÅÆÂêçÂâç„Çí„Åù„ÅÆ„Åæ„Åæ‰øùÂ≠ò**
                    code: row.code.trim(),
                    category: category,
                    price: (() => {
                        const val = parseFloat(row.price.trim());
                        return isNaN(val) ? null : val;
                    })(),
                });
            })
            .on("end", () => {
                resolve(components);
            })
            .on("error", (error) => {
                reject(error);
            });
    });
};

const seedData = async () => {
    const dataDir = path.join(__dirname, "./data");
    
    try {
        // Get all CSV files in the data directory
        const files = fs.readdirSync(dataDir).filter(file => file.endsWith(".csv"));
        
        for (const file of files) {
            let category: string | null = null;
            
            // Determine category based on filename
            if (file === "ÈÉ®ÊùêË≤ª.csv" || file === "ÈÉ®ÊùêË≤ª„Éû„Çπ„Çø.csv") {
                category = "ÈÉ®ÊùêË≤ª";
            } else if (file === "Ê©üÂô®Ë≤ª.csv" || file === "Ê©üÂô®Ë≤ª„Éû„Çπ„Çø.csv") {
                category = "Ê©üÂô®Ë≤ª";
            }
            
            // Skip files that don't match our criteria
            if (!category) {
                console.log(`‚è≠Ô∏è Skipping file: ${file}`);
                continue;
            }
            
            console.log(`\nüìÅ Processing file: ${file} with category: ${category}`);
            
            // Delete existing data for this category
            const deleteResult = await prisma.componentMaster.deleteMany({
                where: { category: category }
            });
            console.log(`üóëÔ∏è Deleted ${deleteResult.count} existing records for category: ${category}`);
            
            // Process the CSV file
            const filePath = path.join(dataDir, file);
            const components = await processCSVFile(filePath, category);
            
            if (components.length > 0) {
                // Insert new data
                const insertResult = await prisma.componentMaster.createMany({
                    data: components,
                    skipDuplicates: true,
                });
                console.log(`‚úÖ Inserted ${components.length} records for category: ${category}`);
            } else {
                console.log(`‚ö†Ô∏è No valid data found in file: ${file}`);
            }
        }
        
        console.log("\n‚úÖ All seed data processed successfully!");
    } catch (error) {
        console.error("‚ùå Error in seedData:", error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
};

seedData();
